<p id="address"></p>
<p id="bltx"></p>
<p id="blvl"></p>
<p id="blvf"></p>
<table id="thetable">
  <tbody>
  <tr>
  </tr>

</tbody></table>
<style>
#address {
    margin-top: 15vh;
    text-align: center;
    font-size: 12px;
    color: rgba(110, 250, 255, 0.31);
}
#bltx {
	text-align: center;
	font-size: 15px;
	letter-spacing: 1.5px;
	user-select: none;
	cursor: default;
}
#blvl {
	text-align: center;
	color: #def58c;
	margin: 0;
	font-size: 40px;
	font-family: 'Montserrat';
}
#blvf {
    text-align: center;
    color: rgba(170, 221, 221, 0.69);
	font-family: 'Montserrat';
}
table {
    border-collapse: collapse;
    margin-left: auto;
    margin-right: auto;
	margin-top: 10vh;
	
}
tbody {
    height: 45vh;
    display: block;
    overflow-y: auto;
    margin-left: auto;
    margin-right: auto;
}
td, th {
    text-align: center;
    padding: 15px;
    border-bottom: 1px solid #dddddd;
    border-top: 1px solid #dddddd;
	width: 20vw;
}
</style>
<script>

function getPrice() {
	https.get('https://api.coinmarketcap.com/v1/ticker/raiblocks/', (res) => {
		let body = "";
		res.on("data", data => {
			body += data;
		});  
		res.on("end", () => {
			body = JSON.parse(body);
			price = body[0].price_usd;
			setTimeout(getPrice, 10000);
		 });
	});
}
getPrice();

walletLoaded(function () {
	var accs = wallet.getAccounts();
	for(let i in accs) {
		var acc = accs[i].account;
		//var bal = accs[i].balance;
		$("#address").html(accs[i].account);
		socket.sendMessage({requestType: "getBalance", address: accs[i].account});

	}
	
	
	socket.on('message', function(r) {
		if (r.type == "Balance") {
/*			wallet.setAccountBalancePublic(r.balance, accs[0].account);
			balance = new BigNumber(r.balance);
			balance = balance.dividedBy('1e+30');
			$("#blvl").html(balance.toFixed(6)+" XRB");
			var blks = wallet.getLastNBlocks(parseXRBAccount(accs[0].account), 20, 0);
			
			$('#thetable tr').not(':first').not(':last').remove();
			var html = '';
			
			for(let i in blks){
				html += '<tr><td>' + blks[i].getType() + '</td><td>' + blks[i].getAmount().over("1000000000000000000000000").toJSNumber() / 1000000 + ' XRB</td></tr>' ;
			}
			$('#thetable tr').first().after(html);
			updateBalFiat(); */
		} 
		if (r.type == "balanceUpdate" || r.type == "Balance") {
			console.log("updating balance");
			wallet.setAccountBalancePublic(r.balance, accs[0].account);
			balance = new BigNumber(r.balance);
			balance = balance.dividedBy('1e+30');
			$("#blvl").html(balance.toFixed(6)+" XRB");
			var blks = wallet.getLastNBlocks(parseXRBAccount(accs[0].account), 20, 0);
			
			var html = '';
			
			for(let i in blks){
				html += '<tr><td>' + blks[i].getType() + '</td><td>' + blks[i].getAmount().over("1000000000000000000000000").toJSNumber() / 1000000 + ' XRB</td></tr>' ;
			}
			$('#thetable tr').html(html);
			updateBalFiat();
		} 
	});
	function updateBalFiat() {
		if (typeof price == 'undefined') {price = 0;}
		$("#blvf").html("$ "+balance.times(price).toFixed(2)+" USD");
		setTimeout(updateBalFiat, 200);
	}
});
</script>